//# { "cases": [ {
//#     "case": "default",
//#     "input": {
//#     },
//#     "expect": [
//#     	"0xd799568a2faaebce79310bbb84e454bf934e61f1879c8095ac7c0a45905d2d3",
//#     	"0x40d2992106b2c6e8c2f0b38e5238fbd9b46ef042d91011a5566044f2943ac65"
//#     ]
//# } ] }

const preimage_len: u32 = 3;
const BITS: u32 = 254;

fn main() -> (field, field) {
    let preimage: field = 42;
    let preimage_bits = std::convert::to_bits(preimage);
    let mut preimage_bits_concatenated = [false; preimage_len * BITS];
    for i in 0..preimage_len {
        for j in 0..BITS {
            preimage_bits_concatenated[i*BITS + j] = preimage_bits[j];
        }
    }

    std::crypto::pedersen(preimage_bits_concatenated)
}